/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   data_init.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/30 15:15:00 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 17:54:01 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static int	ft_pos_atoi(const char *nptr);
static void ft_set_input_values(int *values, t_data *data, int argc);
static int ft_init_philos(t_data *data);
static int ft_get_values(int argc, char **argv, int **values);

int ft_data_init(t_data *data, int argc, char **argv)
{
	int *values;
	
	data->philos = NULL;
	data->forks = NULL;
	data->dead = false;
	data->error = false;
	if (ft_get_values(argc, argv, &values) == -1)
		return (-1);
	ft_set_input_values(values, data, argc);
	if (data->nr_of_philos == 0)
		return (ft_error_message(NO_PHILO));
	if (ft_init_philos(data) == -1)
		return(-1);
	data->forks = malloc(sizeof(t_mtx) * data->nr_of_philos);
	if (!data->forks)
		return(ft_error_message(NO_MEM));
	return(0);
}

static int ft_init_philos(t_data *data)
{
	int i;

	i = 0;
	data->philos = malloc(sizeof(t_philo) * data->nr_of_philos);
	if (!data->philos)
		return(ft_error_message(NO_MEM));
	while(i < data->nr_of_philos)
	{
		(data->philos)[i].id = i + 1;
		(data->philos)[i].data = data;
		ft_safe_mutex(INIT, &(data->philos[i].last_meal_mtx));
		i++;
	}
	return (0);
}
static void ft_set_input_values(int *values, t_data *data, int argc)
{
	data->nr_of_philos = values[0];
	data->lifetime = values[1];
	data->t_eat = values[2];
	data->t_sleep = values[3];
	if (argc == 6)
		data->max_meals = values[4];
	free(values);
}
static int ft_get_values(int argc, char **argv, int **values)
{
	int i;
	int *new_values;
	
	new_values = malloc(sizeof(int) * (argc - 1));
	if(!new_values)
		return(ft_error_message(NO_MEM));
	i = 0;
	while (argv[i + 1])
	{
		new_values[i] = ft_pos_atoi(argv[i + 1]);
		if (new_values[i] == -1)
		{
			free(new_values);
			return(-1);
		}
		i++;
	}
	*values = new_values;
	return (0);
}

static int	ft_pos_atoi(const char *nptr)
{
	int		i;
	long	nb;

	i = 0;
	nb = 0;
	while (nptr[i] && nptr[i] >= '0' && nptr[i] <= '9')
	{
		nb = nb * 10 + (nptr[i] - '0');
		i++;
		if (nb > INT_MAX)
		{
			printf("%s\n", TOO_BIG);
			return (-1);
		}
	}
	return ((int)nb);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   eating.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/31 12:44:53 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/21 22:52:16 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void ft_after_sleep(t_philo *philo, t_data *data);
static int ft_sleep(t_philo *philo, t_tmv begining);
static int ft_odd_philo(t_philo *philo, int id);
static int ft_even_philo(t_philo *philo, int id);
static int ft_forks_taken(t_philo *philo, t_tmv *tmp);

int ft_get_forks(t_philo *philo)
{
	if (ft_am_i_dead(philo) == 1)
		return (1);
	if(philo->id % 2 == 0)
	{	
		if (ft_even_philo(philo, philo->id) == 1)
			return (1);
	}
	else 
	{
		if (ft_odd_philo(philo, philo->id) == 1)
			return (1);
	}
	if (ft_am_i_dead(philo) == 1)
		return (1);
	ft_after_sleep(philo, philo->data);
	return (0);
}

static int ft_odd_philo(t_philo *philo, int id)
{
	t_tmv tmp;
	
	ft_safe_mutex(LOCK, philo->l_fork_mtx);
	gettimeofday(&tmp, NULL);
	if (ft_print_fork(philo, philo->data, tmp, philo->id) == 1)
	{
		ft_safe_mutex(UNLOCK, philo->l_fork_mtx);
		return (1);
	}
	ft_safe_mutex(LOCK, philo->r_fork_mtx);
	if (ft_forks_taken(philo, &tmp) == 1)
		return (1);
	ft_my_usleep(philo->data->t_eat * 1000, tmp);
	ft_safe_mutex(UNLOCK, philo->l_fork_mtx);
	ft_safe_mutex(UNLOCK, philo->r_fork_mtx);
	gettimeofday(&tmp, NULL);
	if (ft_print_sleep(philo, philo->data, tmp, philo->id) == 1)
		return (1);
	if (ft_sleep(philo, tmp) == 1)
		return (1);
	return (0);
}

static int ft_even_philo(t_philo *philo, int id)
{
	t_tmv tmp;

	ft_safe_mutex(LOCK, philo->r_fork_mtx);
	gettimeofday(&tmp, NULL);
	if (ft_print_fork(philo, philo->data, tmp, philo->id) == 1)
	{
		ft_safe_mutex(UNLOCK, philo->l_fork_mtx);
		return (1);
	}
	ft_safe_mutex(LOCK, philo->l_fork_mtx);
	if (ft_forks_taken(philo, &tmp) == 1)
		return (1);
	ft_my_usleep(philo->data->t_eat * 1000, tmp);
	ft_safe_mutex(UNLOCK, philo->r_fork_mtx);
	ft_safe_mutex(UNLOCK, philo->l_fork_mtx);
	gettimeofday(&tmp, NULL);
	if (ft_print_sleep(philo, philo->data, tmp, philo->id) == 1)
		return (1);
	if (ft_sleep(philo, tmp) == 1)
		return (1);
	return (0);
}

static int ft_forks_taken(t_philo *philo, t_tmv *tmp)
{
	ft_safe_mutex(LOCK, &philo->last_meal_mtx);
	gettimeofday(&philo->last_meal, NULL);
	tmp->tv_sec = philo->last_meal.tv_sec;
	tmp->tv_usec = philo->last_meal.tv_usec;
	ft_safe_mutex(UNLOCK, &philo->last_meal_mtx);
	if (ft_print_eat(philo, philo->data, *tmp, philo->id) == 1)
	{
		ft_safe_mutex(UNLOCK, philo->r_fork_mtx);
		ft_safe_mutex(UNLOCK, philo->l_fork_mtx);
		return (1);
	}
	return (0);
}

static int ft_sleep(t_philo *philo, t_tmv begining)
{
	t_tmv timer;
	
	ft_my_usleep(philo->data->t_sleep * 1000, begining);
	gettimeofday(&timer, NULL);
	if (ft_print_think(philo, philo->data, timer, philo->id) == 1)
		return (1);
	return (0);
}

static void ft_after_sleep(t_philo *philo, t_data *data)
{
	int philo_nr;
	long time_to_think;

	philo_nr = philo->data->nr_of_philos;
	if (philo_nr % 2 == 0)
		usleep(2000);
	else
	{ 
		time_to_think = data->t_eat * 2 - data->t_sleep * 2;
		if (time_to_think > 0)
			usleep(time_to_think * 1000);
		else 
			usleep(1000);
	}
}
//t_eat t_sleep
// I eating II waiting III waiting
// I thinking/sleeping II eating III waiting
// I has to be thinking until III gets forks II eating/sleeping II eating

//eating+sleeping+thinking > eating + eating + 1
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/27 18:04:05 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/16 15:27:50 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	ft_error_message(char *str)
{
	printf("%s", str);
	return (-1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   forks.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/29 23:13:15 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 17:47:24 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void ft_assign_forks(t_data *data);
static void ft_assign_mtx(t_philo *philo, int i, t_data *data);

int ft_init_mutexes(t_data *data)
{
	int i;
	
	i = 0;
	while (i < data->nr_of_philos)
	{
		if (ft_safe_mutex(INIT, &(data->forks[i])) == -1)
			return (i + 1);
		i++;
	}
	if (ft_safe_mutex(INIT, &(data->synch)) == -1)
		return (i + 1);
	i++;
	if (ft_safe_mutex(INIT, &(data->dead_mtx)) == -1)
		return (i + 1);
	i++;
	if (ft_safe_mutex(INIT, &(data->print)) == -1)
		return (i + 1);
	ft_assign_forks(data);
	return(0);
}

//odd or even depends on philo's id
static void ft_assign_forks(t_data *data)
{
	int i;

	i = 0;
	while(i < data->nr_of_philos)
	{
		ft_assign_mtx(&(data->philos[i]), i, data);
		i++;
	}
}

static void ft_assign_mtx(t_philo *philo, int i, t_data *data)
{
	if (data->nr_of_philos == 1)
	{
		philo->l_fork_mtx = &(data->forks[i]);
		philo->r_fork_mtx = &(data->forks[i]);
	}
	else if(i == 0)
	{
		philo->l_fork_mtx = &(data->forks[i]);
		philo->r_fork_mtx = &(data->forks[data->nr_of_philos - 1]);
	}
	else
	{
		philo->l_fork_mtx = &(data->forks[i]);
		philo->r_fork_mtx = &(data->forks[i - 1]);
	}	 
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_resources.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/30 15:39:27 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 18:05:13 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static int ft_destroy_mutexes(t_data *data, int nr);

int ft_free_resources(t_data *data, bool mutex, int nr)
{
	int error;
	int i;

	i = 0;
	error = 0;
	if (mutex == true && ft_destroy_mutexes(data, nr) == -1)
		error = -1;
	if (data->forks)
		free(data->forks);
	if (data->philos)
		free(data->philos);
	return(error);
}

static int ft_destroy_mutexes(t_data *data, int nr)
{
	int i;
	int error;
	
	error = 0;
	i = 0;
	while(i <= nr - data->nr_of_philos)
	{
		if(ft_safe_mutex(DESTROY, &(data->philos[i].last_meal_mtx)) == -1)
			error = -1;
		if(ft_safe_mutex(DESTROY, &(data->forks[i])) == -1)
			error = -1;
		i++;
	}
	if (nr >= data->nr_of_philos + 1)
		ft_safe_mutex(DESTROY, &(data->synch));
	if (nr >= data->nr_of_philos + 2)
		ft_safe_mutex(DESTROY, &(data->dead_mtx));
	if (nr >= data->nr_of_philos + 3)
		ft_safe_mutex(DESTROY, &(data->print));
	//to change
	if (error != 0)
		return (ft_error_message("Error ocured while destroying mutexes\n"));
	return(0);
}
int ft_i_threads_destroy(t_data *data, int i)
{
	int j;

	data->error = true;
	ft_safe_mutex(UNLOCK, &(data->synch));
	j = 0;
	while (j < i)
	{
		pthread_join(data->philos[j].philo, NULL);
		i++;
	}
	return(ft_error_message(THRED_ERR));
}

void ft_wait_threads(t_data *data)
{
	int i;

	i = 0;
	while(i < data->nr_of_philos)
	{
		ft_safe_pthread(&(data->philos[i].philo), JOIN, NULL, NULL);
		i++;
	}
	ft_safe_pthread(&(data->monitor), JOIN, NULL, NULL);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_time.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/14 16:56:10 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/21 11:49:38 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long ft_get_diff(t_tmv beginning , t_tmv end)
{
	long usec;
	
	usec = ft_get_sec_diff(beginning, end) * 1000000;
	usec += ft_get_usec_diff(beginning, end);
	return (usec);
}

long ft_get_sec_diff(t_tmv beginning , t_tmv end)
{
	return (end.tv_sec - beginning.tv_sec);
}
long ft_get_usec_diff(t_tmv beginning , t_tmv end)
{
	return (end.tv_usec - beginning.tv_usec);
}

long ft_get_msec(t_tmv start, t_tmv end)
{
	long msec;
	
	msec = ((long)(end.tv_sec - start.tv_sec)) * 1000 +
			((long)(end.tv_usec - start.tv_usec)) / 1000;
	return (msec);	
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   input_checker.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/27 16:40:19 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/16 16:12:20 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

/*
Format I accept is:
- at least 4 up to 5 args(for argc +1)
- only digits
*/
static int ft_check_arguments(char **argv);


int ft_input_checker(int argc, char **argv)
{
	if (!argv)
		return(ft_error_message(NO_ARGS));
	if (argc < 5 || argc > 6)
		return(ft_error_message(WRONG_NR_ARG));
	if (ft_check_arguments(argv) == -1)
		return (-1);
	return(0);
}

static int ft_check_arguments(char **argv)
{
	int i;
	int j;

	i = 1;
	j = 0;
	while (argv[i])
	{
		if(!argv[i][j])
			return (ft_error_message(EMPTY_ARG));
		while(argv[i][j])
		{
			if (!ft_isdigit(argv[i][j]))
				return (ft_error_message(WRONG_TYP_ARG));
			j++;
		}
		j = 0;		
		i++;
	}
	return(0);
}

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   locks.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/31 12:20:44 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/21 13:42:52 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int ft_print_eat(t_philo *philo, t_data *data, t_tmv cur_time, int id)
{
	long msec;
	msec = ft_get_msec(data->beginning, cur_time);
	
	if (ft_am_i_dead(philo) == 1)
		return (1);
	ft_safe_mutex(LOCK ,&data->print);
	printf("%ld ms %d has taken a fork\n", msec, id);
	printf("%ld ms %d is eating\n", msec, id);
	ft_safe_mutex(UNLOCK ,&data->print);
	return(0);
}

int ft_print_fork(t_philo *philo, t_data *data, t_tmv cur_time, int id)
{
	long msec;
	msec = ft_get_msec(data->beginning, cur_time);
	
	if (ft_am_i_dead(philo) == 1)
		return (1);
	ft_safe_mutex(LOCK ,&data->print);
	printf("%ld ms %d has taken a fork\n", msec, id);
	ft_safe_mutex(UNLOCK ,&data->print);
	return (0);
}

int ft_print_sleep(t_philo *philo, t_data *data, t_tmv cur_time, int id)
{
	long msec;
	msec = ft_get_msec(data->beginning, cur_time);
	
	if (ft_am_i_dead(philo) == 1)
		return (1);
	ft_safe_mutex(LOCK ,&data->print);
	printf("%ld ms %d is sleeping\n", msec, id);
	ft_safe_mutex(UNLOCK ,&data->print);
	return (0);
}

int ft_print_died(t_philo *philo, t_data *data, t_tmv cur_time, int id)
{
	long msec;
	msec = ft_get_msec(data->beginning, cur_time);
	
	ft_safe_mutex(LOCK ,&data->print);
	printf("%ld ms %d died\n", msec, id);
	ft_safe_mutex(UNLOCK ,&data->print);
	return (0);
}
int ft_print_think(t_philo *philo, t_data *data, t_tmv cur_time, int id)
{
	long msec;
	msec = ft_get_msec(data->beginning, cur_time);
	
	if (ft_am_i_dead(philo) == 1)
		return (1);
	ft_safe_mutex(LOCK ,&data->print);
	printf("%ld ms %d is thinking\n", msec, id);	
	ft_safe_mutex(UNLOCK ,&data->print);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/26 15:11:43 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 17:49:38 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

//micro 10 -6  mili 10-3
/*allocated
- array of integers 
*/

int main(int argc, char **argv)
{
	t_data data;
	int nr_of_mtxes;
	
	nr_of_mtxes = 0;
	if (ft_input_checker(argc, argv) == -1)
		return (1);
	if (ft_data_init(&data, argc, argv) == -1)
	{
		ft_free_resources(&data, false, 0);
		return (1);
	}
	nr_of_mtxes = ft_init_mutexes(&data);
	if (nr_of_mtxes > 0)
	{
		ft_free_resources(&data, true, nr_of_mtxes);
		return (1);
	}
	if (ft_init_threads(data.nr_of_philos, &data) == -1)
	{
		ft_free_resources(&data, true, data.nr_of_philos + 3);
		return (1);
	}
	ft_wait_threads(&data);
	if (ft_free_resources(&data, true, data.nr_of_philos + 3) == -1)
		return(1);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   my_usleep.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/29 23:16:17 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 14:29:28 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"
//more precise usleep function 
void ft_my_usleep(long usec,  t_tmv t_start)
{
	t_tmv	t_cur;
	long	diff;
	long	rem;

	if (usec < 0)
		return ;
	diff = 0;
	while (diff < usec)
	{
		rem = usec - diff;
		if(rem > 1000)
			usleep(rem - 1000);
		gettimeofday(&t_cur, NULL);	
		diff = (long)((t_cur.tv_sec - t_start.tv_sec) * 1000000 + (t_cur.tv_usec - t_start.tv_usec));
	}
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   safe_mutexes.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/08 13:56:51 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/18 17:50:31 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int ft_safe_mutex(t_optype type, t_mtx *mutex)
{
	int value;

	value = 0;
	if (type == LOCK)
		value = pthread_mutex_lock(mutex);
	else if (type == UNLOCK)
		value = pthread_mutex_unlock(mutex);
	else if (type == INIT)
		value = pthread_mutex_init(mutex, NULL);
	else if (type == DESTROY)
		value = pthread_mutex_destroy(mutex);
	if (value != 0)
	{
		printf("Mutex operation failed (error code %d)\n", value);
		perror(NULL);
		return(-1);
	}
		//return (ft_error_message(MTX_ERR));//
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   safe_pthreads.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/08 13:58:50 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/16 16:51:08 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int ft_safe_pthread(pthread_t *thread, t_optype type, t_philo *philo, t_data *data)
{
	int value;

	value = 0;
	if (type == CREATE_MONITOR)
		value = pthread_create(thread, NULL, &ft_monitor, data);
	else if (type == CREATE_PHILO)
		value = pthread_create(thread, NULL, &ft_philo, philo);
	else if (type == JOIN)
		value = pthread_join(*thread, NULL);
	if (value != 0)
		return (ft_error_message(PTHR_ERR));
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   threds.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fgrabows <fgrabows@student.42warsaw.pl>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/29 11:29:56 by fgrabows          #+#    #+#             */
/*   Updated: 2024/11/21 22:40:49 by fgrabows         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int ft_init_threads(int nr_of_philos, t_data *data)
{
	int i;
	
	i = 0;
	ft_safe_mutex(LOCK, &data->synch);
	while(i < nr_of_philos)
	{
		ft_safe_pthread(&(data->philos[i].philo), CREATE_PHILO, &(data->philos[i]), NULL);
		i++;
	}
	ft_safe_pthread(&data->monitor, CREATE_MONITOR, NULL, data);
	i = 0;
	gettimeofday(&data->beginning, NULL);
	while(i < nr_of_philos)
	{
		ft_safe_mutex(LOCK, &(data->philos[i].last_meal_mtx));
		data->philos[i].last_meal.tv_sec = data->beginning.tv_sec;
		data->philos[i].last_meal.tv_usec =  data->beginning.tv_usec;
		ft_safe_mutex(UNLOCK, &(data->philos[i].last_meal_mtx));
		i++;
	}
	ft_safe_mutex(UNLOCK, &data->synch);
	return(0);
}

void *ft_philo(void *arg)
{
	t_philo *philo;
	int status;
	
	philo = (t_philo *)arg;
	ft_safe_mutex(LOCK, &philo->data->synch);
	ft_safe_mutex(UNLOCK, &philo->data->synch);
	if(philo->id % 2 == 0)
		usleep(1000);
	while(1)
	{
		if (ft_am_i_dead(philo) == 1)
			return (NULL);
		if (ft_get_forks(philo) == 1)
			return (NULL);
	}
}

int ft_am_i_dead(t_philo *philo)
{
	int ret;
	
	ft_safe_mutex(LOCK, &(philo->data->dead_mtx));
	if (philo->data->dead == true)
		ret = 1;
	else 
		ret = 0;
	ft_safe_mutex(UNLOCK, &(philo->data->dead_mtx));
	return(ret);
}
void *ft_monitor(void *arg)
{
	t_data *data;
	int status;
	int i;

	data = (t_data *)arg;
	ft_safe_mutex(LOCK, &data->synch);
	ft_safe_mutex(UNLOCK, &data->synch);
	i = 0;
	while(1)
	{
		while(i < data->nr_of_philos)
		{
			if (ft_are_u_ok(&(data->philos[i])) == 1)
				return (NULL);
			i++;
		}
		usleep(1000);
		i = 0;
	}
	return (NULL);
}

int ft_are_u_ok(t_philo *philo)
{
	t_tmv cur;
	int ret;

	ret = 0;
	ft_safe_mutex(LOCK, &(philo->last_meal_mtx));
	gettimeofday(&cur, NULL);
	if (ft_get_msec(philo->last_meal, cur) > philo->data->lifetime)
	{
		ft_safe_mutex(UNLOCK, &(philo->last_meal_mtx));
		ft_safe_mutex(LOCK, &(philo->data->dead_mtx));
		philo->data->dead = true;
		ft_safe_mutex(UNLOCK, &(philo->data->dead_mtx));
		ft_print_died(philo, philo->data, cur, philo->id);
		return(1);
	}
	ft_safe_mutex(UNLOCK, &(philo->last_meal_mtx));
	return (0);
}
